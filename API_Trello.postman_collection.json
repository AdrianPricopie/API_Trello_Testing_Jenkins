{
	"info": {
		"_postman_id": "80813b68-9d0b-4ef8-b8b4-c1fba00111b1",
		"name": "API Trello",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30229388",
		"_collection_link": "https://winter-zodiac-863664.postman.co/workspace/TMTA12~da86ca65-8915-4a45-9d40-14d23d111c58/collection/30229388-80813b68-9d0b-4ef8-b8b4-c1fba00111b1?action=share&source=collection_link&creator=30229388"
	},
	"item": [
		{
			"name": "Create_a_board",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.environment.set(\"board_id\", jsonData.id) // Save board_id for future use",
							"",
							"pm.test(\"Verify if I can create a board succesfully \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify the json structure is correct when I create a board\", function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('idOrganization')",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('prefs');",
							"    pm.expect(jsonData.prefs).to.be.an('object');",
							"    pm.expect(jsonData.prefs).to.have.property('background');",
							"    pm.expect(jsonData.prefs.switcherViews).to.be.an('array')",
							"});",
							"",
							"",
							"pm.test(\"Verify correct board name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"TestBoard\");",
							"});",
							"",
							"pm.test(\"Verify url exist when i create a board\", function () {",
							"    pm.expect(jsonData.url).to.be.exist;",
							"});",
							"pm.test(\"Verify when I create a aboard the permission is private\", function () {",
							"    pm.expect(jsonData.prefs.permissionLevel).to.eql(\"private\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/?key={{key}}&name=TestBoard&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "name",
							"value": "TestBoard"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_a_board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify value for deleting a board\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData._value).to.eql(null);",
							"});",
							"pm.test(\"Verify if I can delete a board\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/{{board_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						"{{board_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create board for list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.environment.set(\"board_id\", jsonData.id)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/?key={{key}}&name=City&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "name",
							"value": "City"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.environment.set(\"list_id\", jsonData.id)",
							"",
							"pm.test(\"Verify if I can create a list\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify list name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Coffee\");",
							"});",
							"pm.test(\"Verify idBoard\", function () {",
							"    pm.expect(jsonData.idBoard).to.eql(pm.variables.get(\"board_id\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/lists/?key={{key}}&name=Coffee&token={{token}}&idBoard={{board_id}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"lists",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "name",
							"value": "Coffee"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "idBoard",
							"value": "{{board_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive a list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Verify if I can archive a list\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify the name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Coffee\");",
							"});",
							"",
							"pm.test(\"Name should exist and not be empty\", function () {",
							"  pm.expect(jsonData.name).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Verify the list is archived\", function () {",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.closed).to.equal(true);",
							"});",
							"",
							"pm.test(\"Verify idBoard exists\", function () {",
							"    pm.expect(jsonData).to.have.property('idBoard');",
							"    pm.expect(jsonData.idBoard).to.eql(pm.variables.get(\"board_id\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/lists/{{list_id}}/closed?key={{key}}&token={{token}}&value=true",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"lists",
						"{{list_id}}",
						"closed"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "value",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Unarchive a list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Verify if I can unarchive a list\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify the name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Coffee\");",
							"});",
							"",
							"pm.test(\"Name should exist and not be empty\", function () {",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData).to.exist.and.to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Verify the list is unarchived\", function () {",
							"  pm.expect(jsonData).to.be.an('object');",
							"  pm.expect(jsonData.closed).to.equal(false);",
							"});",
							"",
							"pm.test(\"Verify idBoard exists\", function () {",
							"    pm.expect(jsonData).to.have.property('idBoard');",
							"    pm.expect(jsonData.idBoard).to.eql(pm.variables.get(\"board_id\"));",
							"",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/lists/{{list_id}}/closed?key={{key}}&token={{token}}&value=false",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"lists",
						"{{list_id}}",
						"closed"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "value",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.environment.set(\"card_id\", jsonData.id)",
							"",
							"pm.test(\"Verify if i can create a card\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify name of a card\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"sugar\");",
							"});",
							"pm.test(\"Verify the json structure is correct when I create a card\", function () {",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('badges')",
							"    pm.expect(jsonData).to.have.property('url');",
							"    pm.expect(jsonData).to.have.property('closed');",
							"    pm.expect(jsonData).to.have.property('pos');",
							"    pm.expect(jsonData.badges).to.be.an('object');",
							"    pm.expect(jsonData.badges.attachmentsByType).to.be.an('object');",
							"    ",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/cards?key={{key}}&token={{token}}&idList={{list_id}}&name=sugar",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "idList",
							"value": "{{list_id}}"
						},
						{
							"key": "name",
							"value": "sugar"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json(); ",
							"",
							"pm.test(\"Verify I can update a board\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify the name is changed after update\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Country\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/Boards/{{board_id}}?key={{key}}&token={{token}}&name=Country",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"Boards",
						"{{board_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "Country"
						},
						{
							"key": "name",
							"value": "sugar",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if i can update a list\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json()).to.have.property(\"id\");",
							"});",
							"pm.test(\"Verify the name of the list is changed after update\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Milk\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/lists/{{list_id}}?key={{key}}&token={{token}}&name=Milk",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"lists",
						"{{list_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "Milk"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"    var jsonData = pm.response.json()",
							"",
							"pm.test(\"Verify if i can update a card\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify the name of the card is updated after changed \", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Cow\");",
							"});",
							"pm.test(\"Verify the description of a card\", function () {",
							"    pm.expect(jsonData.desc).to.eql(\"The Best milk\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/cards/{{card_id}}?key={{key}}&token={{token}}&name=Cow&desc=The Best milk",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"cards",
						"{{card_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "Cow"
						},
						{
							"key": "desc",
							"value": "The Best milk"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read a board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" var jsonData = pm.response.json();",
							"",
							"pm.test(\"Verify the status code is 200 for read a board\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify board Id is correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"board_id\"));",
							"});",
							"pm.test(\"Verify the board name is correct\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Country\");",
							"});",
							"pm.test(\"Verify the permission level is private\", function () {",
							"    pm.expect(jsonData.prefs.permissionLevel).to.eql(\"private\");",
							"});",
							"",
							"pm.test(\"Verify available views are correct\", function () {",
							"    var views = jsonData.prefs.switcherViews;",
							"",
							"    var expectedViews = [",
							"        { viewType: \"Board\", enabled: true },",
							"        { viewType: \"Table\", enabled: true },",
							"        { viewType: \"Calendar\", enabled: false },",
							"        { viewType: \"Dashboard\", enabled: false },",
							"        { viewType: \"Timeline\", enabled: false },",
							"        { viewType: \"Map\", enabled: false }",
							"    ];",
							"",
							"    pm.expect(views).to.eql(expectedViews);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/{{board_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						"{{board_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json();",
							"",
							"pm.test(\"Verify the status code is 200 for reading a list\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify list Id is correct\", function () {",
							"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"list_id\"));",
							"});",
							"pm.test(\"Verify list is associated with the correct board\", function () {",
							"    pm.expect(jsonData.idBoard).to.eql(pm.variables.get(\"board_id\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/lists/{{list_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"lists",
						"{{list_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "Milk",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json();",
							"",
							"pm.test(\"Verify the status code is 200 for reading a card\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify the card name is correct\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Cow\");",
							"});",
							"pm.test(\"Verify the list ID of a card is correct\", function () {",
							"    pm.expect(jsonData.idList).to.eql(pm.variables.get(\"list_id\"));",
							"});",
							"pm.test(\"Verify board Id is correct\", function () {",
							"    pm.expect(jsonData.idBoard).to.eql(pm.variables.get(\"board_id\"));",
							"});",
							"pm.test(\"Verify the card description is correct\", function () {",
							"    pm.expect(jsonData.desc).to.eql(\"The Best milk\");",
							"});",
							"pm.test(\"Verify the card has no votes\", function () {",
							"    pm.expect(jsonData.badges.votes).to.eql(0);",
							"});",
							"pm.test(\"Verify the card has no attachments\", function () {",
							"    pm.expect(jsonData.badges.attachments).to.eql(0);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/cards/{{card_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"cards",
						"{{card_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "idList",
							"value": "{{list_id}}",
							"disabled": true
						},
						{
							"key": "name",
							"value": "sugar",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.environment.set(\"checklist_id\", jsonData.id)",
							"",
							"pm.test(\"Verify if I can create a checklist\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify the checklist name is correct\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Checklist\");",
							"});",
							"",
							"pm.test(\"Checklist has no items initially\", function () {",
							"",
							"    pm.expect(jsonData.checkItems).to.be.an('array').that.is.empty;",
							"});",
							"pm.test(\"Checklist limits are empty\", function () {",
							"",
							"    pm.expect(jsonData.limits).to.be.an('object').that.is.empty;",
							"});",
							"pm.test(\"Checklist is associated with the correct board\", function () {",
							"    pm.expect(jsonData.idBoard).to.eql(pm.variables.get(\"board_id\"));",
							"});",
							"pm.test(\"Checklist is associated with the correct card\", function () {",
							"    pm.expect(jsonData.idCard).to.eql(pm.variables.get(\"card_id\"))",
							"});",
							"pm.test(\"Checklist position is correct\", function () {",
							"    pm.expect(jsonData.pos).to.eql(16384);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/checklists?idCard={{card_id}}&key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"checklists"
					],
					"query": [
						{
							"key": "idCard",
							"value": "{{card_id}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();",
							"",
							"pm.test(\"Verify checklist updated succesfully\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify the new name has been Updated\", function () {",
							"    pm.expect(response.name).to.eql(\"pozitive test cases\");",
							"});",
							"pm.test(\"Checklist is associated with the correct board\", function () {",
							"    pm.expect(response.idBoard).to.eql(pm.variables.get(\"board_id\"));",
							"});",
							"pm.test(\"Checklist is associated with the correct card\", function () {",
							"    pm.expect(response.idCard).to.eql(pm.variables.get(\"card_id\"))",
							"});",
							"pm.test(\"Checklist position is correct\", function () {",
							"    pm.expect(response.pos).to.eql(16384);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/checklists/{{checklist_id}}?key={{key}}&token={{token}}&name=pozitive test cases",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"checklists",
						"{{checklist_id}}"
					],
					"query": [
						{
							"key": "idCard",
							"value": "{{card_id}}",
							"disabled": true
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "pozitive test cases"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Read checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var response = pm.response.json();",
							"",
							"pm.test(\"Verify if i can read a checklist\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify the name of a checklist\", function () {",
							"    pm.expect(response.name).to.eql(\"pozitive test cases\");",
							"});",
							"pm.test(\"Checklist is associated with the correct board\", function () {",
							"    pm.expect(response.idBoard).to.eql(pm.variables.get(\"board_id\"));",
							"});",
							"pm.test(\"Checklist is associated with the correct card\", function () {",
							"    pm.expect(response.idCard).to.eql(pm.variables.get(\"card_id\"))",
							"});",
							"pm.test(\"Checklist position is correct\", function () {",
							"    pm.expect(response.pos).to.eql(16384);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/checklists/{{checklist_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"checklists",
						"{{checklist_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "pozitive test cases",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete checklist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if i can delete a checklist\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/checklists/{{checklist_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"checklists",
						"{{checklist_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify if i can delete a card\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/cards/{{card_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"cards",
						"{{card_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "name",
							"value": "sugar",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_a_board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify value for deleting a board\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData._value).to.eql(null);",
							"});",
							"pm.test(\"Verify if I can delete a board\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify the content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/{{board_id}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						"{{board_id}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a board with negative token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify the status code is 401 Unauthorized when i try to create a board with wrong key\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/?key={{NegativeKey}}&name=MyBoard&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{NegativeKey}}"
						},
						{
							"key": "name",
							"value": "MyBoard"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a board without name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify the status code is 400 Bad Request when i try to create a board with without name\", function () {",
							"   pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Verify message error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"invalid value for name\");",
							"    pm.expect(jsonData.error).to.eql(\"ERROR\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "name",
							"value": "MyBoard",
							"disabled": true
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a board with space in name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify the status code is 400 Bad Request when i try to create a board with without name\", function () {",
							"   pm.response.to.have.status(400);",
							"});",
							"pm.test(\"Verify message error\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"invalid value for name\");",
							"    pm.expect(jsonData.error).to.eql(\"ERROR\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/?key={{key}}&name= &token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "name",
							"value": " "
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a board with public permissionLevel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()",
							"",
							"pm.environment.set(\"board_id3\", jsonData.id)",
							"",
							"pm.test(\"Verify if i can create a board\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Verify if the permission is public\", function () {",
							"     pm.expect(jsonData.prefs.permissionLevel).to.eql(\"public\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/?key={{key}}&name=  M&token={{token}}&prefs_permissionLevel=public",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "name",
							"value": "  M"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "prefs_permissionLevel",
							"value": "public"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "clean Up",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/boards/{{board_id3}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"boards",
						"{{board_id3}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						},
						{
							"key": "perfs_permissionLevel",
							"value": "public",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Available Emoji",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Emoji array is present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.trello).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Emoji array has more than one item\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.trello.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Emoji array has more than one item\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.trello.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Emoji object structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if(jsonData.trello.length > 0) {\r",
							"        pm.expect(jsonData.trello[0]).to.have.property(\"unified\");\r",
							"        pm.expect(jsonData.trello[0]).to.have.property(\"name\");\r",
							"        pm.expect(jsonData.trello[0]).to.have.property(\"native\");\r",
							"    } else {\r",
							"        pm.fail(\"No emoji found in response\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Contains emoji 'FACE WITH TEARS OF JOY'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var hasJoyEmoji = jsonData.trello.some(function(emoji) {\r",
							"        return emoji.name === \"FACE WITH TEARS OF JOY\";\r",
							"    });\r",
							"    pm.expect(hasJoyEmoji).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/1/emoji",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"emoji"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Member Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response should contain specific fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('fullName');\r",
							"    pm.expect(jsonData).to.have.property('username');\r",
							"    pm.expect(jsonData).to.have.property('email');\r",
							"    pm.expect(jsonData).to.have.property('avatarUrl');\r",
							"    pm.expect(jsonData).to.have.property('dateLastActive');\r",
							"    pm.expect(jsonData).to.have.property('idBoards').that.is.an('array');\r",
							"    pm.expect(jsonData).to.have.property('idOrganizations').that.is.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Limits should be present and have correct structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('limits');\r",
							"    pm.expect(jsonData.limits).to.have.property('boards');\r",
							"    pm.expect(jsonData.limits.boards).to.have.property('totalPerMember');\r",
							"    pm.expect(jsonData.limits).to.have.property('orgs');\r",
							"    pm.expect(jsonData.limits.orgs).to.have.property('totalPerMember');\r",
							"});\r",
							"\r",
							"pm.test(\"FullName should not be empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.fullName).to.be.a('string').and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Username should not be empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.be.a('string').and.to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/1/members/me?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"members",
						"me"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new Organization",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.environment.set(\"idOrganization\",jsonData.id)\r",
							"\r",
							"pm.test(\"Name should be 'robiorganization'\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"robiorganization\");\r",
							"});\r",
							"\r",
							"pm.test(\"DisplayName should be 'Robi Organization'\", function () {\r",
							"    pm.expect(jsonData.displayName).to.eql(\"Robi Organization\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check status to be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"URL should be 'https://trello.com/w/robiorganization'\", function () {\r",
							"    pm.expect(jsonData.url).to.eql(\"https://trello.com/w/robiorganization\");\r",
							"});\r",
							"\r",
							"pm.test(\"descData should have 'emoji' field\", function () {\r",
							"    pm.expect(jsonData.descData).to.have.property('emoji').that.is.an('object');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.trello.com/1/organizations?displayName=Robi Organization&key={{key}}&token={{token}}",
					"protocol": "https",
					"host": [
						"api",
						"trello",
						"com"
					],
					"path": [
						"1",
						"organizations"
					],
					"query": [
						{
							"key": "displayName",
							"value": "Robi Organization"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Name should be 'robiorganization'\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"robiorganization\");\r",
							"});\r",
							"\r",
							"pm.test(\"DisplayName should be 'Robi Organization'\", function () {\r",
							"    pm.expect(jsonData.displayName).to.eql(\"Robi Organization\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check status to be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"URL should be 'https://trello.com/w/robiorganization'\", function () {\r",
							"    pm.expect(jsonData.url).to.eql(\"https://trello.com/w/robiorganization\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify idOrganization\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"idOrganization\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{BaseUrl}}/1/organizations/{{idOrganization}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"organizations",
						"{{idOrganization}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check status to be 200\", function () {\r",
							"    var jsonData = pm.response.json()\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an empty object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object').that.is.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/1/organizations/{{idOrganization}}?key={{key}}&token={{token}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"1",
						"organizations",
						"{{idOrganization}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Responsable response time\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(3000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "https://api.trello.com",
			"type": "string"
		},
		{
			"key": "key",
			"value": "44438edca4a4e1a59b6901bbfe82fe2f",
			"type": "string"
		},
		{
			"key": "token",
			"value": "ATTAfd0a36012eddf7265f3b33ab967d08c7a53ed3ea000996b8f18f8129b98ef5dc2089C076",
			"type": "string"
		},
		{
			"key": "board_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "list_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "checklist_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "NegativeKey",
			"value": "4e2432832dcdewqa4a4e1a59b6desad",
			"type": "string"
		},
		{
			"key": "board_id2",
			"value": "",
			"type": "string"
		},
		{
			"key": "board_id3",
			"value": "",
			"type": "string"
		}
	]
}